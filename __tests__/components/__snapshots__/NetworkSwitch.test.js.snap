// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NetworkSwitch renders without crashing 1`] = `
<IntlProvider
  defaultFormats={Object {}}
  defaultLocale="en"
  formats={Object {}}
  locale="en"
  messages={
    Object {
      "Asset": "Assetasdasd",
      "activityAddAddress": "Add",
      "activityExport": "Export",
      "activityPageLabel": "All Activity",
      "activityViewTx": "View",
      "addAContact": "Add A Contact",
      "addContactDetails": "Add Contact Details",
      "addToContacts": "Add to contacts",
      "addToken": "Add Token",
      "addressLabel": "PUBLIC ADDRESS",
      "assetRecipients": "Asset {transferCount, plural, one {Recipient} other {Recipients}}",
      "assets": "Assets",
      "auth.cancel": "Cancel",
      "auth.import.recoveryInstructions": "Upload a JSON wallet recovery file here to add your accounts to Neon. This option is also available on the Settings page.",
      "auth.ledger.connectLedger": "Connect and unlock your <strong>Ledger device</strong>",
      "auth.ledger.fetchAddress": "Fetch additional addresses",
      "auth.ledger.navigateToNeoApp": "Navigate to the <strong>NEO app</strong> on your device",
      "auth.ledger.retry": "Retry?",
      "authCreateWallet": "Create Wallet",
      "authEncrypted": "ENCRYPTED",
      "authImportWallet": "Import Wallet",
      "authLedger": "LEDGER",
      "authLedgerAddressLabel": "PUBLIC ADDRESS",
      "authLedgerFirstStep": "Connect and unlock your Ledger device",
      "authLedgerSecondStep": "Navigate to the NEO app on your device",
      "authLogin": "Login",
      "authLoginButton": "Login",
      "authPrivate": "PRIVATE",
      "authPrivateKeyPlaceholder": "Enter your private key here",
      "authSaved": "SAVED",
      "authScanQRButton": "Scan QR",
      "authWatch": "WATCH",
      "authWatchPlaceholder": "Enter a NEO address here",
      "automaticNodeSelectionTooltip": "Allow NEON to choose a node automatically",
      "captureQR": "Capture",
      "captureQRCaps": "CAPTURE",
      "chooseAccount": "Choose an Existing Account",
      "claimFeeDisclaimerN3": "Claiming GAS requires at least 0.01120527 GAS for transaction fees",
      "claimFeeGreater": "Claimable GAS is less than transaction fees",
      "claimTimeDisclaimer": "You can claim GAS once every 5 minutes",
      "claimUnavailableInWatch": "GAS claims are unavailable in Watch mode",
      "completeExclaim": "Complete!",
      "confirmAndSend": "Confirm & Send",
      "confirmRemoveContact": "Please confirm removing contact",
      "confirmation": "Confirmation",
      "confirmationRecipient": "{transferCount, number} {transferCount, plural, one {Recipient} other {Recipients}}",
      "contactName": "Name",
      "contactWalletAddress": "Wallet Address",
      "contactsPageLabel": "Manage Contacts",
      "copyAddressTooltip": "Copy Wallet Address",
      "copyCodeImage": "Copy Code Image",
      "createANewWallet": "Create New Wallet",
      "dashboardAddressLabel": "Address:",
      "dashboardAssetsPanelLabel": "System Assets",
      "dashboardAssetsTotal": "TOTAL",
      "dashboardBalancePanelLabel": "Token Balances",
      "dashboardGasClaimButton": "Claim {amount} GAS",
      "dashboardManageWallets": "Manage Wallets",
      "dashboardMarketData1Day": "1 DAY",
      "dashboardMarketData1Month": "1 MONTH",
      "dashboardMarketData1Week": "1 WEEK",
      "dashboardMarketDataLabel": "Market Data",
      "dashboardPriceNotAvailable": "N/A",
      "dashboardRefresh": "Refresh",
      "dashboardTokenBalancesHoldings": "HOLDINGS",
      "dashboardTokenBalancesPrice": "PRICE",
      "dashboardTokenBalancesToken": "Token",
      "dashboardValueLabel": "Total Wallet Value",
      "deleteLabel": "Delete",
      "depositAssets": "Deposit assets <b> compatible  with the NEO blockchain </b> using your address:",
      "editAContact": "Edit A Contact",
      "editContactDisclaimer": "Please review and ensure that you have entered the address correctly to avoid loss of funds",
      "editRecipients": "Edit Recipients",
      "encryptButton": "Generate Encrypted Key",
      "encryptInstructions": "Choose a passphrase to encrypt an existing key",
      "encryptPanelHeader": "Encrypt a key",
      "encryptStep1Label": "1) ENTER THE PRIVATE KEY YOU WANT TO ENCRYPT",
      "encryptStep1Placeholder": "Enter key",
      "encryptStep2Label": "2) CREATE A PASSPHRASE",
      "encryptStep2Placeholder": "Enter Passphrase",
      "encryptStep3Label": "3) CONFIM YOUR PASSPHRASE",
      "encryptStep3Placeholder": "Confirm Passphrase",
      "encryptedKeyLabel": "ENCRYPTED KEY",
      "enterAContactName": "Enter Contact Name...",
      "enterAWalletAddress": "Enter Wallet Address...",
      "errors.contact.contactExists": "You already have a contact with that address.",
      "errors.contact.invalidAddress": "Address is not valid.",
      "errors.contact.nameDupe": "You already have an account saved with that name.",
      "errors.contact.nameLength": "Name is too long.",
      "errors.contact.nameNull": "Name can't be null.",
      "errors.encrypt.valid": "The private key is not valid.",
      "errors.network.general": "Oops! Something went wrong...",
      "errors.password.length": "Passphrase must contain at least {PASS_MIN_LENGTH, number} characters.",
      "errors.password.match": "Passphrases must match.",
      "errors.request.fractional": "You canot request fractional {asset}.",
      "errors.request.max": "You cannot request more than 100,000,000 {asset}.",
      "errors.request.min": "You cannot request 0 {asset}.",
      "errors.request.validDecimals": "You can only request {asset} up to {validDecimals, number} decimals.",
      "errors.send.balance": "You do not have enough balance to send {total} {asset}.",
      "errors.send.blackListed": "Address is blacklisted. This is a known phishing address.",
      "errors.send.decimal": "You can only send {asset} up to {decimalCount, number} decimals.",
      "errors.send.fraction": "You cannot send fractional amounts of NEO.",
      "errors.send.invalidAddress": "You need to specify a valid NEO address.",
      "errors.send.invalidN3Address": "You need to specify a valid NEO N3 address.",
      "errors.send.negative": "You cannot send negative amounts of {asset}.",
      "errors.send.network": "A network error has occurred",
      "errors.send.number": "Amount must be a number.",
      "errors.send.zero": "Can not send 0 {asset}.",
      "fast": "Fast",
      "faster": "Faster",
      "fastest": "Fastest",
      "fee": "Fee:",
      "generateQrCodes": "Generate QR Codes",
      "importFile": "Import File",
      "inputEncryptedPlaceholder": "Encrypted Key",
      "inputPasswordPlaceholder": "Password",
      "inputSelectPlaceholder": "Select",
      "isLoadingMessage": "Loading...",
      "manageWalletsCreate": "Create",
      "manageWalletsEdit": "Edit",
      "manageWalletsEditWallet": "Edit Wallet",
      "manageWalletsEditWalletAddressLabel": "WALLET ADDRESS",
      "manageWalletsEditWalletInstructions": "Modify Details",
      "manageWalletsEditWalletNameLabel": "WALLET NAME",
      "manageWalletsEditWalletNamePlaceholder": "Wallet Name",
      "manageWalletsEditWalletSave": "Save Changes",
      "manageWalletsImport": "Import",
      "manageWalletsLabel": "Manage Wallets",
      "modalActionCancel": "Cancel",
      "modalActionConfirm": "Confirm",
      "modifyDetails": "Modify Details",
      "networkConfigTooltipAddress": "ADDRESS:",
      "networkConfigTooltipPublicKey": "PUBLIC KEY:",
      "networkConfigTooltipUpdateSettings": "Update Settings",
      "networkSettingsAutomatic": "AUTOMATIC",
      "networkSettingsCurrentLabel": "CURRENT NETWORK",
      "networkSettingsExplorerLabel": "BLOCK EXPLORER",
      "networkSettingsInstructions": "Manage all network settings related to how Neon interacts with the blockchain",
      "networkSettingsLabel": "Network Settings",
      "networkSettingsNodeSelectLabel": "NODE SELECTION",
      "newContact": "New Contact",
      "newsPageLabel": "News",
      "nextStep": "Next Step",
      "noAvailableAssetsToSend": "No available assets to send",
      "noClaimableGas": "Address has no claimable GAS",
      "noOptionsMessage": "No options",
      "nodeSelectBlockHeight": "Block Height",
      "nodeSelectInfo": "Top {nodeCount, number} nodes listed",
      "nodeSelectPanelHeader": "Node Selection",
      "nodeSelectSelectAutomatically": "Select automatically",
      "nodeSelectionInstructions": "If youâ€™re experiencing performance issues, try selecting a custom node below",
      "nothingToSeeHere": "Nothing to see here!",
      "notifications.failure.blockchainInfoFailure": "Failed to retrieve blockchain information.",
      "notifications.success.accountSaved": "Account saved!",
      "notifications.success.receivedBlockchainInfo": "Received latest blockchain information.",
      "notifications.success.updatedWalletName": "Succesfully updated wallet name.",
      "numberofTransactionsPending": "{transferCount, number} {transferCount, plural, one {Transfer} other {Transfers}} pending",
      "previousStep": "Previous Step",
      "print": "Print",
      "priorityTransfer": "Priority Transfer",
      "privateKey": "Private Key",
      "privateKeyLabel": "PRIVATE KEY",
      "publicAddress": "Public Address",
      "receiveAssetsAddressLabel": "Your Public Address",
      "receiveCopyCodeButton": "Copy Code Image",
      "receiveDisclaimer": "Only send assets that are <b>compatible with the NEO blockchain (NEO, GAS, etc.)</b>. Sending other assets will result in permanent loss.",
      "receivePageLabel": "Receive Assets",
      "receiveQRExplanation": "<p>Ever sent assets to the wrong address because of an errant character in the wallet address?</p><p>If not, lucky you - but it happens with frightening regularity.</p>  <p>Here at CoZ, we want to ensure people that pay you get your details right. You can generate a QR code for requesting assets to help them help you.</p><p>Every code you generate will include your public wallet address, an asset amount and a reference - all set by you.</p>",
      "receiveRequestTabAssets": "REQUEST ASSETS",
      "receiveYourAddressTabLabel": "YOUR ADDRESS",
      "recieveSelectMethod": "Select Deposit Method",
      "recieveWhyUseQRLabel": "Why use a QR code?",
      "recoverWallet": "RECOVER WALLET",
      "recoverWalletLabel": "RECOVER WALLET",
      "removeContact": "Remove Contact",
      "requestAssetAmount": "AMOUNT",
      "requestAssetAmountLabel": "Amount",
      "requestAssetDepositLabel": "DEPOSIT INTO THIS WALLET",
      "requestAssetLabel": "ASSET",
      "requestAssetQRButton": "Generate QR Code",
      "requestAssetRefLabel": "REFERENCE",
      "requestAssetRefPlaceholder": "Add a note...",
      "requestAssetYourQRHeader": "Your QR Code",
      "requestAssetsAddressLabel": "ADDRESS",
      "requestAssetsAmountLabel": "AMOUNT",
      "requestAssetsAssetLabel": "ASSET",
      "requestAssetsPaymentDetails": "PAYMENT REQUEST DETAILS",
      "requestAssetsRefLabel": "REFERENCE",
      "requestAssetsYourQRLabel": "YOUR QR CODE",
      "saveContactButtonText": "Save Contact",
      "selectAssets": "Select Assets",
      "sendActivityLink": "Check the activity tab to see the status of your transaction.",
      "sendAdd": "Add Recipient",
      "sendAddressLabel": "RECIPIENT ADDRESS",
      "sendAddressPlaceholder": "Add wallet or select contact",
      "sendAmountLabel": "AMOUNT",
      "sendAsset": "asset",
      "sendAssetCapital": "Asset",
      "sendAssetLabel": "ASSET",
      "sendAssets": "assets",
      "sendAssetsCapital": "Assets",
      "sendBroadcasting": "Broadcasting transaction to network...",
      "sendCompleteNotification": "Transaction pending! Your balance will automatically update when the blockchain has processed it.",
      "sendCompletion": "Complete! {transferCount, number} {transferCount, plural, one {sendAsset} other {sendAssets}} to {transferCount, plural, one {sendRecipient} other {sendRecipients}}",
      "sendDisclaimer": "Please review and ensure that you have entered the correct details to avoid loss of funds.",
      "sendEnterQRCode": "Enter QR Code",
      "sendErrorLabel": "Error!",
      "sendImport": "Import",
      "sendMaxAmount": "MAX",
      "sendMoreAssets": "Send More Assets",
      "sendPageLabel": "Send Assets",
      "sendQRExplanation": "So you've been given a QR code? Click capture and hold it up to your camera.",
      "sendRecipient": "recipient",
      "sendRecipientCapital": "Recipient",
      "sendRecipients": "recipients",
      "sendRecipientsCapital": "Recipients",
      "sendSelectAssets": "{transferCount, number} of {maxNumberOfRecipients, number} Recipients",
      "sendTranfer": "TRANSFER",
      "sendTransferMessage": "{transferCount, number} {transferCount, plural, one {sendTransfer} other {sendTransferPlural}} pending",
      "sendTransferPlural": "TRANSFERS",
      "sendWithFee": "Send {itemCount, plural, one {Asset} other {Assets}} With Fee",
      "sendWithoutFee": "Send {itemCount, plural, one {Asset} other {Assets}} Without Fee",
      "settingCurrencyLabel": "CURRENCY",
      "settingsBackUpLink": "EXPORT",
      "settingsBackUpLinkLabel": "BACKUP WALLET",
      "settingsCommunity": "Community Support",
      "settingsDonationLink": "Created by CoZ. Donations:",
      "settingsEncryptLink": "ENCRYPT A KEY",
      "settingsLanguageLabel": "LANGUAGE",
      "settingsManageLabel": "Manage your neon wallet",
      "settingsNetworkConfigLabel": "NETWORK CONFIGURATION",
      "settingsRecoverWalletLink": "IMPORT",
      "settingsSoundLabel": "SOUND",
      "settingsThemeLabel": "THEME",
      "sidebarActivity": "Activity",
      "sidebarContacts": "Contacts",
      "sidebarCurrentBlock": "CURRENT BLOCK",
      "sidebarLogout": "Logout",
      "sidebarNews": "News",
      "sidebarReceive": "Receive",
      "sidebarSend": "Send",
      "sidebarSettings": "Settings",
      "sidebarTokenSale": "Token Sale",
      "sidebarWallet": "Wallet",
      "splitKeyLabel": "SPLIT KEY",
      "splitKeyWalletInstructions": "The Split Key import option allows users to create a new NEO account by combining the private key of an existing account with a separate private key.",
      "splitKeyWalletNamePlaceholder": "Enter your new split key wallet name...",
      "takeMeBack": "Take me back",
      "tokenSaleDisclaimer1": "Please read and acknowledge these statements to continue",
      "tokenSaleDisclaimer2": "I understand that submitting NEO or GAS multiple times may result in a loss of funds or a delayed refund depending on the policy of the ICO company.",
      "tokenSaleDisclaimer3": "I understand that some sales may only accept NEO or GAS, and I have verified which is accepted.",
      "tokenSaleDisclaimer4": "I understand that if I send NEO or GAS to a token sale that has already ended, I will lose my NEO/GAS and will not be refunded.",
      "tokenSaleDisclaimer5": "I understand that City of Zion (CoZ) is not responsible for my usage of this feature, and I have consulted this software's licenses.",
      "tokenSalePageHeader": "Participate in Token Sale",
      "transactionFeeQuestion": "PRIORITIZE YOUR TRANSACTION WITH A FEE?",
      "transactionId": "Transaction ID:",
      "walletCreatedDisclaimer": "<b>Save these details!</b> If you lose these credentials, you lose access to your assets.",
      "walletCreatedHeader": "Wallet Created!",
      "walletCreationButton": "Create Wallet",
      "walletCreationInstruction": "Enter Details",
      "walletCreationWalletNameLabel": "WALLET NAME",
      "walletCreationWalletNamePlaceholder": "Wallet Name",
      "walletCreationWalletPasswordConfirmLabel": "CONFIRM PASSPHRASE",
      "walletCreationWalletPasswordConfirmPlaceholder": "Confirm Password",
      "walletCreationWalletPasswordLabel": "PASSPHRASE",
      "walletCreationWalletPasswordPlaceholder": "Password",
      "walletImportedHeader": "Wallet Created!",
      "walletManagerNoLocalInfo": "It looks like you have no wallet information saved locally...",
      "walletManagerRemoveWallet": "Remove Wallet",
      "walletQrCodes": "Wallet QR Codes",
    }
  }
  onError={[Function]}
  textComponent={Symbol(react.fragment)}
>
  <NetworkSwitch
    networks={
      Array [
        Object {
          "deprecatedLabel": "MainNet",
          "id": "1",
          "label": "2.x MainNet",
          "network": "MainNet",
          "value": "1",
        },
        Object {
          "deprecatedLabel": "TestNet",
          "id": "2",
          "label": "2.x TestNet",
          "network": "TestNet",
          "value": "2",
        },
        Object {
          "deprecatedLabel": "Custom",
          "id": "Custom",
          "label": "Custom",
          "network": "Custom",
          "value": "Custom",
        },
      ]
    }
    onChange={[MockFunction]}
    value={
      Object {
        "deprecatedLabel": "MainNet",
        "id": "1",
        "label": "2.x MainNet",
        "network": "MainNet",
        "value": "1",
      }
    }
  >
    <div
      className="networkSwitch"
      id="network"
    >
      <StyledReactSelect
        hideHighlight={true}
        isSearchable={false}
        onChange={[Function]}
        options={
          Array [
            Object {
              "deprecatedLabel": "MainNet",
              "id": "1",
              "label": "2.x MainNet",
              "network": "MainNet",
              "value": "1",
            },
            Object {
              "deprecatedLabel": "TestNet",
              "id": "2",
              "label": "2.x TestNet",
              "network": "TestNet",
              "value": "2",
            },
            Object {
              "deprecatedLabel": "Custom",
              "id": "Custom",
              "label": "Custom",
              "network": "Custom",
              "value": "Custom",
            },
          ]
        }
        value={
          Object {
            "label": "2.x MainNet",
          }
        }
      >
        <FormattedMessage
          id="inputSelectPlaceholder"
          values={Object {}}
        >
          <StateManager
            className="react-select-container"
            classNamePrefix="react-select"
            defaultInputValue=""
            defaultMenuIsOpen={false}
            defaultValue={null}
            hideHighlight={true}
            isSearchable={false}
            loadingMessage={[Function]}
            maxMenuHeight={140}
            noOptionsMessage={[Function]}
            onChange={[Function]}
            options={
              Array [
                Object {
                  "deprecatedLabel": "MainNet",
                  "id": "1",
                  "label": "2.x MainNet",
                  "network": "MainNet",
                  "value": "1",
                },
                Object {
                  "deprecatedLabel": "TestNet",
                  "id": "2",
                  "label": "2.x TestNet",
                  "network": "TestNet",
                  "value": "2",
                },
                Object {
                  "deprecatedLabel": "Custom",
                  "id": "Custom",
                  "label": "Custom",
                  "network": "Custom",
                  "value": "Custom",
                },
              ]
            }
            placeholder="Select..."
            styles={
              Object {
                "control": [Function],
                "dropdownIndicator": [Function],
                "indicatorSeparator": [Function],
                "noOptionsMessage": [Function],
                "option": [Function],
                "singleValue": [Function],
                "valueContainer": [Function],
              }
            }
            value={
              Object {
                "label": "2.x MainNet",
              }
            }
          >
            <Select
              backspaceRemovesValue={true}
              blurInputOnSelect={true}
              captureMenuScroll={false}
              className="react-select-container"
              classNamePrefix="react-select"
              closeMenuOnScroll={false}
              closeMenuOnSelect={true}
              components={Object {}}
              controlShouldRenderValue={true}
              defaultInputValue=""
              defaultMenuIsOpen={false}
              defaultValue={null}
              escapeClearsValue={false}
              filterOption={[Function]}
              formatGroupLabel={[Function]}
              getOptionLabel={[Function]}
              getOptionValue={[Function]}
              hideHighlight={true}
              inputValue=""
              isDisabled={false}
              isLoading={false}
              isMulti={false}
              isOptionDisabled={[Function]}
              isRtl={false}
              isSearchable={false}
              loadingMessage={[Function]}
              maxMenuHeight={140}
              menuIsOpen={false}
              menuPlacement="bottom"
              menuPosition="absolute"
              menuShouldBlockScroll={false}
              menuShouldScrollIntoView={true}
              minMenuHeight={140}
              noOptionsMessage={[Function]}
              onChange={[Function]}
              onInputChange={[Function]}
              onMenuClose={[Function]}
              onMenuOpen={[Function]}
              openMenuOnClick={true}
              openMenuOnFocus={false}
              options={
                Array [
                  Object {
                    "deprecatedLabel": "MainNet",
                    "id": "1",
                    "label": "2.x MainNet",
                    "network": "MainNet",
                    "value": "1",
                  },
                  Object {
                    "deprecatedLabel": "TestNet",
                    "id": "2",
                    "label": "2.x TestNet",
                    "network": "TestNet",
                    "value": "2",
                  },
                  Object {
                    "deprecatedLabel": "Custom",
                    "id": "Custom",
                    "label": "Custom",
                    "network": "Custom",
                    "value": "Custom",
                  },
                ]
              }
              pageSize={5}
              placeholder="Select..."
              screenReaderStatus={[Function]}
              styles={
                Object {
                  "control": [Function],
                  "dropdownIndicator": [Function],
                  "indicatorSeparator": [Function],
                  "noOptionsMessage": [Function],
                  "option": [Function],
                  "singleValue": [Function],
                  "valueContainer": [Function],
                }
              }
              tabIndex="0"
              tabSelectsValue={true}
              value={
                Object {
                  "label": "2.x MainNet",
                }
              }
            >
              <SelectContainer
                className="react-select-container"
                clearValue={[Function]}
                cx={[Function]}
                getStyles={[Function]}
                getValue={[Function]}
                hasValue={true}
                innerProps={
                  Object {
                    "id": undefined,
                    "onKeyDown": [Function],
                  }
                }
                isDisabled={false}
                isFocused={false}
                isMulti={false}
                isRtl={false}
                options={
                  Array [
                    Object {
                      "deprecatedLabel": "MainNet",
                      "id": "1",
                      "label": "2.x MainNet",
                      "network": "MainNet",
                      "value": "1",
                    },
                    Object {
                      "deprecatedLabel": "TestNet",
                      "id": "2",
                      "label": "2.x TestNet",
                      "network": "TestNet",
                      "value": "2",
                    },
                    Object {
                      "deprecatedLabel": "Custom",
                      "id": "Custom",
                      "label": "Custom",
                      "network": "Custom",
                      "value": "Custom",
                    },
                  ]
                }
                selectOption={[Function]}
                selectProps={
                  Object {
                    "backspaceRemovesValue": true,
                    "blurInputOnSelect": true,
                    "captureMenuScroll": false,
                    "className": "react-select-container",
                    "classNamePrefix": "react-select",
                    "closeMenuOnScroll": false,
                    "closeMenuOnSelect": true,
                    "components": Object {},
                    "controlShouldRenderValue": true,
                    "defaultInputValue": "",
                    "defaultMenuIsOpen": false,
                    "defaultValue": null,
                    "disabled": undefined,
                    "escapeClearsValue": false,
                    "filterOption": [Function],
                    "fontSize": undefined,
                    "formatGroupLabel": [Function],
                    "getOptionLabel": [Function],
                    "getOptionValue": [Function],
                    "hideChevron": undefined,
                    "hideHighlight": true,
                    "inputValue": "",
                    "isDisabled": false,
                    "isLoading": false,
                    "isMulti": false,
                    "isOptionDisabled": [Function],
                    "isRtl": false,
                    "isSearchable": false,
                    "loadingMessage": [Function],
                    "maxMenuHeight": 140,
                    "menuIsOpen": false,
                    "menuPlacement": "bottom",
                    "menuPosition": "absolute",
                    "menuShouldBlockScroll": false,
                    "menuShouldScrollIntoView": true,
                    "minMenuHeight": 140,
                    "noOptionsMessage": [Function],
                    "onChange": [Function],
                    "onInputChange": [Function],
                    "onMenuClose": [Function],
                    "onMenuOpen": [Function],
                    "openMenuOnClick": true,
                    "openMenuOnFocus": false,
                    "options": Array [
                      Object {
                        "deprecatedLabel": "MainNet",
                        "id": "1",
                        "label": "2.x MainNet",
                        "network": "MainNet",
                        "value": "1",
                      },
                      Object {
                        "deprecatedLabel": "TestNet",
                        "id": "2",
                        "label": "2.x TestNet",
                        "network": "TestNet",
                        "value": "2",
                      },
                      Object {
                        "deprecatedLabel": "Custom",
                        "id": "Custom",
                        "label": "Custom",
                        "network": "Custom",
                        "value": "Custom",
                      },
                    ],
                    "pageSize": 5,
                    "placeholder": "Select...",
                    "screenReaderStatus": [Function],
                    "settingsSelect": undefined,
                    "styles": Object {
                      "control": [Function],
                      "dropdownIndicator": [Function],
                      "indicatorSeparator": [Function],
                      "noOptionsMessage": [Function],
                      "option": [Function],
                      "singleValue": [Function],
                      "valueContainer": [Function],
                    },
                    "tabIndex": "0",
                    "tabSelectsValue": true,
                    "transparent": undefined,
                    "value": Object {
                      "label": "2.x MainNet",
                    },
                  }
                }
                setValue={[Function]}
              >
                <div
                  className="css-10nd86i react-select-container"
                  onKeyDown={[Function]}
                >
                  <Control
                    clearValue={[Function]}
                    cx={[Function]}
                    getStyles={[Function]}
                    getValue={[Function]}
                    hasValue={true}
                    innerProps={
                      Object {
                        "onMouseDown": [Function],
                        "onTouchEnd": [Function],
                      }
                    }
                    innerRef={[Function]}
                    isDisabled={false}
                    isFocused={false}
                    isMulti={false}
                    isRtl={false}
                    options={
                      Array [
                        Object {
                          "deprecatedLabel": "MainNet",
                          "id": "1",
                          "label": "2.x MainNet",
                          "network": "MainNet",
                          "value": "1",
                        },
                        Object {
                          "deprecatedLabel": "TestNet",
                          "id": "2",
                          "label": "2.x TestNet",
                          "network": "TestNet",
                          "value": "2",
                        },
                        Object {
                          "deprecatedLabel": "Custom",
                          "id": "Custom",
                          "label": "Custom",
                          "network": "Custom",
                          "value": "Custom",
                        },
                      ]
                    }
                    selectOption={[Function]}
                    selectProps={
                      Object {
                        "backspaceRemovesValue": true,
                        "blurInputOnSelect": true,
                        "captureMenuScroll": false,
                        "className": "react-select-container",
                        "classNamePrefix": "react-select",
                        "closeMenuOnScroll": false,
                        "closeMenuOnSelect": true,
                        "components": Object {},
                        "controlShouldRenderValue": true,
                        "defaultInputValue": "",
                        "defaultMenuIsOpen": false,
                        "defaultValue": null,
                        "disabled": undefined,
                        "escapeClearsValue": false,
                        "filterOption": [Function],
                        "fontSize": undefined,
                        "formatGroupLabel": [Function],
                        "getOptionLabel": [Function],
                        "getOptionValue": [Function],
                        "hideChevron": undefined,
                        "hideHighlight": true,
                        "inputValue": "",
                        "isDisabled": false,
                        "isLoading": false,
                        "isMulti": false,
                        "isOptionDisabled": [Function],
                        "isRtl": false,
                        "isSearchable": false,
                        "loadingMessage": [Function],
                        "maxMenuHeight": 140,
                        "menuIsOpen": false,
                        "menuPlacement": "bottom",
                        "menuPosition": "absolute",
                        "menuShouldBlockScroll": false,
                        "menuShouldScrollIntoView": true,
                        "minMenuHeight": 140,
                        "noOptionsMessage": [Function],
                        "onChange": [Function],
                        "onInputChange": [Function],
                        "onMenuClose": [Function],
                        "onMenuOpen": [Function],
                        "openMenuOnClick": true,
                        "openMenuOnFocus": false,
                        "options": Array [
                          Object {
                            "deprecatedLabel": "MainNet",
                            "id": "1",
                            "label": "2.x MainNet",
                            "network": "MainNet",
                            "value": "1",
                          },
                          Object {
                            "deprecatedLabel": "TestNet",
                            "id": "2",
                            "label": "2.x TestNet",
                            "network": "TestNet",
                            "value": "2",
                          },
                          Object {
                            "deprecatedLabel": "Custom",
                            "id": "Custom",
                            "label": "Custom",
                            "network": "Custom",
                            "value": "Custom",
                          },
                        ],
                        "pageSize": 5,
                        "placeholder": "Select...",
                        "screenReaderStatus": [Function],
                        "settingsSelect": undefined,
                        "styles": Object {
                          "control": [Function],
                          "dropdownIndicator": [Function],
                          "indicatorSeparator": [Function],
                          "noOptionsMessage": [Function],
                          "option": [Function],
                          "singleValue": [Function],
                          "valueContainer": [Function],
                        },
                        "tabIndex": "0",
                        "tabSelectsValue": true,
                        "transparent": undefined,
                        "value": Object {
                          "label": "2.x MainNet",
                        },
                      }
                    }
                    setValue={[Function]}
                  >
                    <div
                      className="css-14c2uc6 react-select__control"
                      onMouseDown={[Function]}
                      onTouchEnd={[Function]}
                    >
                      <ValueContainer
                        clearValue={[Function]}
                        cx={[Function]}
                        getStyles={[Function]}
                        getValue={[Function]}
                        hasValue={true}
                        isDisabled={false}
                        isMulti={false}
                        isRtl={false}
                        options={
                          Array [
                            Object {
                              "deprecatedLabel": "MainNet",
                              "id": "1",
                              "label": "2.x MainNet",
                              "network": "MainNet",
                              "value": "1",
                            },
                            Object {
                              "deprecatedLabel": "TestNet",
                              "id": "2",
                              "label": "2.x TestNet",
                              "network": "TestNet",
                              "value": "2",
                            },
                            Object {
                              "deprecatedLabel": "Custom",
                              "id": "Custom",
                              "label": "Custom",
                              "network": "Custom",
                              "value": "Custom",
                            },
                          ]
                        }
                        selectOption={[Function]}
                        selectProps={
                          Object {
                            "backspaceRemovesValue": true,
                            "blurInputOnSelect": true,
                            "captureMenuScroll": false,
                            "className": "react-select-container",
                            "classNamePrefix": "react-select",
                            "closeMenuOnScroll": false,
                            "closeMenuOnSelect": true,
                            "components": Object {},
                            "controlShouldRenderValue": true,
                            "defaultInputValue": "",
                            "defaultMenuIsOpen": false,
                            "defaultValue": null,
                            "disabled": undefined,
                            "escapeClearsValue": false,
                            "filterOption": [Function],
                            "fontSize": undefined,
                            "formatGroupLabel": [Function],
                            "getOptionLabel": [Function],
                            "getOptionValue": [Function],
                            "hideChevron": undefined,
                            "hideHighlight": true,
                            "inputValue": "",
                            "isDisabled": false,
                            "isLoading": false,
                            "isMulti": false,
                            "isOptionDisabled": [Function],
                            "isRtl": false,
                            "isSearchable": false,
                            "loadingMessage": [Function],
                            "maxMenuHeight": 140,
                            "menuIsOpen": false,
                            "menuPlacement": "bottom",
                            "menuPosition": "absolute",
                            "menuShouldBlockScroll": false,
                            "menuShouldScrollIntoView": true,
                            "minMenuHeight": 140,
                            "noOptionsMessage": [Function],
                            "onChange": [Function],
                            "onInputChange": [Function],
                            "onMenuClose": [Function],
                            "onMenuOpen": [Function],
                            "openMenuOnClick": true,
                            "openMenuOnFocus": false,
                            "options": Array [
                              Object {
                                "deprecatedLabel": "MainNet",
                                "id": "1",
                                "label": "2.x MainNet",
                                "network": "MainNet",
                                "value": "1",
                              },
                              Object {
                                "deprecatedLabel": "TestNet",
                                "id": "2",
                                "label": "2.x TestNet",
                                "network": "TestNet",
                                "value": "2",
                              },
                              Object {
                                "deprecatedLabel": "Custom",
                                "id": "Custom",
                                "label": "Custom",
                                "network": "Custom",
                                "value": "Custom",
                              },
                            ],
                            "pageSize": 5,
                            "placeholder": "Select...",
                            "screenReaderStatus": [Function],
                            "settingsSelect": undefined,
                            "styles": Object {
                              "control": [Function],
                              "dropdownIndicator": [Function],
                              "indicatorSeparator": [Function],
                              "noOptionsMessage": [Function],
                              "option": [Function],
                              "singleValue": [Function],
                              "valueContainer": [Function],
                            },
                            "tabIndex": "0",
                            "tabSelectsValue": true,
                            "transparent": undefined,
                            "value": Object {
                              "label": "2.x MainNet",
                            },
                          }
                        }
                        setValue={[Function]}
                      >
                        <div
                          className="css-1n98qky react-select__value-container react-select__value-container--has-value"
                        >
                          <SingleValue
                            clearValue={[Function]}
                            cx={[Function]}
                            data={
                              Object {
                                "label": "2.x MainNet",
                              }
                            }
                            getStyles={[Function]}
                            getValue={[Function]}
                            hasValue={true}
                            isDisabled={false}
                            isMulti={false}
                            isRtl={false}
                            options={
                              Array [
                                Object {
                                  "deprecatedLabel": "MainNet",
                                  "id": "1",
                                  "label": "2.x MainNet",
                                  "network": "MainNet",
                                  "value": "1",
                                },
                                Object {
                                  "deprecatedLabel": "TestNet",
                                  "id": "2",
                                  "label": "2.x TestNet",
                                  "network": "TestNet",
                                  "value": "2",
                                },
                                Object {
                                  "deprecatedLabel": "Custom",
                                  "id": "Custom",
                                  "label": "Custom",
                                  "network": "Custom",
                                  "value": "Custom",
                                },
                              ]
                            }
                            selectOption={[Function]}
                            selectProps={
                              Object {
                                "backspaceRemovesValue": true,
                                "blurInputOnSelect": true,
                                "captureMenuScroll": false,
                                "className": "react-select-container",
                                "classNamePrefix": "react-select",
                                "closeMenuOnScroll": false,
                                "closeMenuOnSelect": true,
                                "components": Object {},
                                "controlShouldRenderValue": true,
                                "defaultInputValue": "",
                                "defaultMenuIsOpen": false,
                                "defaultValue": null,
                                "disabled": undefined,
                                "escapeClearsValue": false,
                                "filterOption": [Function],
                                "fontSize": undefined,
                                "formatGroupLabel": [Function],
                                "getOptionLabel": [Function],
                                "getOptionValue": [Function],
                                "hideChevron": undefined,
                                "hideHighlight": true,
                                "inputValue": "",
                                "isDisabled": false,
                                "isLoading": false,
                                "isMulti": false,
                                "isOptionDisabled": [Function],
                                "isRtl": false,
                                "isSearchable": false,
                                "loadingMessage": [Function],
                                "maxMenuHeight": 140,
                                "menuIsOpen": false,
                                "menuPlacement": "bottom",
                                "menuPosition": "absolute",
                                "menuShouldBlockScroll": false,
                                "menuShouldScrollIntoView": true,
                                "minMenuHeight": 140,
                                "noOptionsMessage": [Function],
                                "onChange": [Function],
                                "onInputChange": [Function],
                                "onMenuClose": [Function],
                                "onMenuOpen": [Function],
                                "openMenuOnClick": true,
                                "openMenuOnFocus": false,
                                "options": Array [
                                  Object {
                                    "deprecatedLabel": "MainNet",
                                    "id": "1",
                                    "label": "2.x MainNet",
                                    "network": "MainNet",
                                    "value": "1",
                                  },
                                  Object {
                                    "deprecatedLabel": "TestNet",
                                    "id": "2",
                                    "label": "2.x TestNet",
                                    "network": "TestNet",
                                    "value": "2",
                                  },
                                  Object {
                                    "deprecatedLabel": "Custom",
                                    "id": "Custom",
                                    "label": "Custom",
                                    "network": "Custom",
                                    "value": "Custom",
                                  },
                                ],
                                "pageSize": 5,
                                "placeholder": "Select...",
                                "screenReaderStatus": [Function],
                                "settingsSelect": undefined,
                                "styles": Object {
                                  "control": [Function],
                                  "dropdownIndicator": [Function],
                                  "indicatorSeparator": [Function],
                                  "noOptionsMessage": [Function],
                                  "option": [Function],
                                  "singleValue": [Function],
                                  "valueContainer": [Function],
                                },
                                "tabIndex": "0",
                                "tabSelectsValue": true,
                                "transparent": undefined,
                                "value": Object {
                                  "label": "2.x MainNet",
                                },
                              }
                            }
                            setValue={[Function]}
                          >
                            <div
                              className="css-mdengd react-select__single-value"
                            >
                              2.x MainNet
                            </div>
                          </SingleValue>
                          <DummyInput
                            id="react-select-2-input"
                            innerRef={[Function]}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            readOnly={true}
                            tabIndex="0"
                            value=""
                          >
                            <input
                              className="css-14uuagi"
                              id="react-select-2-input"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              readOnly={true}
                              tabIndex="0"
                              value=""
                            />
                          </DummyInput>
                        </div>
                      </ValueContainer>
                      <IndicatorsContainer
                        clearValue={[Function]}
                        cx={[Function]}
                        getStyles={[Function]}
                        getValue={[Function]}
                        hasValue={true}
                        isDisabled={false}
                        isMulti={false}
                        isRtl={false}
                        options={
                          Array [
                            Object {
                              "deprecatedLabel": "MainNet",
                              "id": "1",
                              "label": "2.x MainNet",
                              "network": "MainNet",
                              "value": "1",
                            },
                            Object {
                              "deprecatedLabel": "TestNet",
                              "id": "2",
                              "label": "2.x TestNet",
                              "network": "TestNet",
                              "value": "2",
                            },
                            Object {
                              "deprecatedLabel": "Custom",
                              "id": "Custom",
                              "label": "Custom",
                              "network": "Custom",
                              "value": "Custom",
                            },
                          ]
                        }
                        selectOption={[Function]}
                        selectProps={
                          Object {
                            "backspaceRemovesValue": true,
                            "blurInputOnSelect": true,
                            "captureMenuScroll": false,
                            "className": "react-select-container",
                            "classNamePrefix": "react-select",
                            "closeMenuOnScroll": false,
                            "closeMenuOnSelect": true,
                            "components": Object {},
                            "controlShouldRenderValue": true,
                            "defaultInputValue": "",
                            "defaultMenuIsOpen": false,
                            "defaultValue": null,
                            "disabled": undefined,
                            "escapeClearsValue": false,
                            "filterOption": [Function],
                            "fontSize": undefined,
                            "formatGroupLabel": [Function],
                            "getOptionLabel": [Function],
                            "getOptionValue": [Function],
                            "hideChevron": undefined,
                            "hideHighlight": true,
                            "inputValue": "",
                            "isDisabled": false,
                            "isLoading": false,
                            "isMulti": false,
                            "isOptionDisabled": [Function],
                            "isRtl": false,
                            "isSearchable": false,
                            "loadingMessage": [Function],
                            "maxMenuHeight": 140,
                            "menuIsOpen": false,
                            "menuPlacement": "bottom",
                            "menuPosition": "absolute",
                            "menuShouldBlockScroll": false,
                            "menuShouldScrollIntoView": true,
                            "minMenuHeight": 140,
                            "noOptionsMessage": [Function],
                            "onChange": [Function],
                            "onInputChange": [Function],
                            "onMenuClose": [Function],
                            "onMenuOpen": [Function],
                            "openMenuOnClick": true,
                            "openMenuOnFocus": false,
                            "options": Array [
                              Object {
                                "deprecatedLabel": "MainNet",
                                "id": "1",
                                "label": "2.x MainNet",
                                "network": "MainNet",
                                "value": "1",
                              },
                              Object {
                                "deprecatedLabel": "TestNet",
                                "id": "2",
                                "label": "2.x TestNet",
                                "network": "TestNet",
                                "value": "2",
                              },
                              Object {
                                "deprecatedLabel": "Custom",
                                "id": "Custom",
                                "label": "Custom",
                                "network": "Custom",
                                "value": "Custom",
                              },
                            ],
                            "pageSize": 5,
                            "placeholder": "Select...",
                            "screenReaderStatus": [Function],
                            "settingsSelect": undefined,
                            "styles": Object {
                              "control": [Function],
                              "dropdownIndicator": [Function],
                              "indicatorSeparator": [Function],
                              "noOptionsMessage": [Function],
                              "option": [Function],
                              "singleValue": [Function],
                              "valueContainer": [Function],
                            },
                            "tabIndex": "0",
                            "tabSelectsValue": true,
                            "transparent": undefined,
                            "value": Object {
                              "label": "2.x MainNet",
                            },
                          }
                        }
                        setValue={[Function]}
                      >
                        <div
                          className="css-1wy0on6 react-select__indicators"
                        >
                          <IndicatorSeparator
                            clearValue={[Function]}
                            cx={[Function]}
                            getStyles={[Function]}
                            getValue={[Function]}
                            hasValue={true}
                            isDisabled={false}
                            isFocused={false}
                            isMulti={false}
                            isRtl={false}
                            options={
                              Array [
                                Object {
                                  "deprecatedLabel": "MainNet",
                                  "id": "1",
                                  "label": "2.x MainNet",
                                  "network": "MainNet",
                                  "value": "1",
                                },
                                Object {
                                  "deprecatedLabel": "TestNet",
                                  "id": "2",
                                  "label": "2.x TestNet",
                                  "network": "TestNet",
                                  "value": "2",
                                },
                                Object {
                                  "deprecatedLabel": "Custom",
                                  "id": "Custom",
                                  "label": "Custom",
                                  "network": "Custom",
                                  "value": "Custom",
                                },
                              ]
                            }
                            selectOption={[Function]}
                            selectProps={
                              Object {
                                "backspaceRemovesValue": true,
                                "blurInputOnSelect": true,
                                "captureMenuScroll": false,
                                "className": "react-select-container",
                                "classNamePrefix": "react-select",
                                "closeMenuOnScroll": false,
                                "closeMenuOnSelect": true,
                                "components": Object {},
                                "controlShouldRenderValue": true,
                                "defaultInputValue": "",
                                "defaultMenuIsOpen": false,
                                "defaultValue": null,
                                "disabled": undefined,
                                "escapeClearsValue": false,
                                "filterOption": [Function],
                                "fontSize": undefined,
                                "formatGroupLabel": [Function],
                                "getOptionLabel": [Function],
                                "getOptionValue": [Function],
                                "hideChevron": undefined,
                                "hideHighlight": true,
                                "inputValue": "",
                                "isDisabled": false,
                                "isLoading": false,
                                "isMulti": false,
                                "isOptionDisabled": [Function],
                                "isRtl": false,
                                "isSearchable": false,
                                "loadingMessage": [Function],
                                "maxMenuHeight": 140,
                                "menuIsOpen": false,
                                "menuPlacement": "bottom",
                                "menuPosition": "absolute",
                                "menuShouldBlockScroll": false,
                                "menuShouldScrollIntoView": true,
                                "minMenuHeight": 140,
                                "noOptionsMessage": [Function],
                                "onChange": [Function],
                                "onInputChange": [Function],
                                "onMenuClose": [Function],
                                "onMenuOpen": [Function],
                                "openMenuOnClick": true,
                                "openMenuOnFocus": false,
                                "options": Array [
                                  Object {
                                    "deprecatedLabel": "MainNet",
                                    "id": "1",
                                    "label": "2.x MainNet",
                                    "network": "MainNet",
                                    "value": "1",
                                  },
                                  Object {
                                    "deprecatedLabel": "TestNet",
                                    "id": "2",
                                    "label": "2.x TestNet",
                                    "network": "TestNet",
                                    "value": "2",
                                  },
                                  Object {
                                    "deprecatedLabel": "Custom",
                                    "id": "Custom",
                                    "label": "Custom",
                                    "network": "Custom",
                                    "value": "Custom",
                                  },
                                ],
                                "pageSize": 5,
                                "placeholder": "Select...",
                                "screenReaderStatus": [Function],
                                "settingsSelect": undefined,
                                "styles": Object {
                                  "control": [Function],
                                  "dropdownIndicator": [Function],
                                  "indicatorSeparator": [Function],
                                  "noOptionsMessage": [Function],
                                  "option": [Function],
                                  "singleValue": [Function],
                                  "valueContainer": [Function],
                                },
                                "tabIndex": "0",
                                "tabSelectsValue": true,
                                "transparent": undefined,
                                "value": Object {
                                  "label": "2.x MainNet",
                                },
                              }
                            }
                            setValue={[Function]}
                          >
                            <span
                              className="css-1hyfx7x react-select__indicator-separator"
                            />
                          </IndicatorSeparator>
                          <DropdownIndicator
                            clearValue={[Function]}
                            cx={[Function]}
                            getStyles={[Function]}
                            getValue={[Function]}
                            hasValue={true}
                            innerProps={
                              Object {
                                "aria-hidden": "true",
                                "onMouseDown": [Function],
                                "onTouchEnd": [Function],
                              }
                            }
                            isDisabled={false}
                            isFocused={false}
                            isMulti={false}
                            isRtl={false}
                            options={
                              Array [
                                Object {
                                  "deprecatedLabel": "MainNet",
                                  "id": "1",
                                  "label": "2.x MainNet",
                                  "network": "MainNet",
                                  "value": "1",
                                },
                                Object {
                                  "deprecatedLabel": "TestNet",
                                  "id": "2",
                                  "label": "2.x TestNet",
                                  "network": "TestNet",
                                  "value": "2",
                                },
                                Object {
                                  "deprecatedLabel": "Custom",
                                  "id": "Custom",
                                  "label": "Custom",
                                  "network": "Custom",
                                  "value": "Custom",
                                },
                              ]
                            }
                            selectOption={[Function]}
                            selectProps={
                              Object {
                                "backspaceRemovesValue": true,
                                "blurInputOnSelect": true,
                                "captureMenuScroll": false,
                                "className": "react-select-container",
                                "classNamePrefix": "react-select",
                                "closeMenuOnScroll": false,
                                "closeMenuOnSelect": true,
                                "components": Object {},
                                "controlShouldRenderValue": true,
                                "defaultInputValue": "",
                                "defaultMenuIsOpen": false,
                                "defaultValue": null,
                                "disabled": undefined,
                                "escapeClearsValue": false,
                                "filterOption": [Function],
                                "fontSize": undefined,
                                "formatGroupLabel": [Function],
                                "getOptionLabel": [Function],
                                "getOptionValue": [Function],
                                "hideChevron": undefined,
                                "hideHighlight": true,
                                "inputValue": "",
                                "isDisabled": false,
                                "isLoading": false,
                                "isMulti": false,
                                "isOptionDisabled": [Function],
                                "isRtl": false,
                                "isSearchable": false,
                                "loadingMessage": [Function],
                                "maxMenuHeight": 140,
                                "menuIsOpen": false,
                                "menuPlacement": "bottom",
                                "menuPosition": "absolute",
                                "menuShouldBlockScroll": false,
                                "menuShouldScrollIntoView": true,
                                "minMenuHeight": 140,
                                "noOptionsMessage": [Function],
                                "onChange": [Function],
                                "onInputChange": [Function],
                                "onMenuClose": [Function],
                                "onMenuOpen": [Function],
                                "openMenuOnClick": true,
                                "openMenuOnFocus": false,
                                "options": Array [
                                  Object {
                                    "deprecatedLabel": "MainNet",
                                    "id": "1",
                                    "label": "2.x MainNet",
                                    "network": "MainNet",
                                    "value": "1",
                                  },
                                  Object {
                                    "deprecatedLabel": "TestNet",
                                    "id": "2",
                                    "label": "2.x TestNet",
                                    "network": "TestNet",
                                    "value": "2",
                                  },
                                  Object {
                                    "deprecatedLabel": "Custom",
                                    "id": "Custom",
                                    "label": "Custom",
                                    "network": "Custom",
                                    "value": "Custom",
                                  },
                                ],
                                "pageSize": 5,
                                "placeholder": "Select...",
                                "screenReaderStatus": [Function],
                                "settingsSelect": undefined,
                                "styles": Object {
                                  "control": [Function],
                                  "dropdownIndicator": [Function],
                                  "indicatorSeparator": [Function],
                                  "noOptionsMessage": [Function],
                                  "option": [Function],
                                  "singleValue": [Function],
                                  "valueContainer": [Function],
                                },
                                "tabIndex": "0",
                                "tabSelectsValue": true,
                                "transparent": undefined,
                                "value": Object {
                                  "label": "2.x MainNet",
                                },
                              }
                            }
                            setValue={[Function]}
                          >
                            <div
                              aria-hidden="true"
                              className="css-qfyl2b react-select__indicator react-select__dropdown-indicator"
                              onMouseDown={[Function]}
                              onTouchEnd={[Function]}
                            >
                              <DownChevron>
                                <Svg
                                  size={20}
                                >
                                  <svg
                                    aria-hidden="true"
                                    className="css-19bqh2r"
                                    focusable="false"
                                    height={20}
                                    viewBox="0 0 20 20"
                                    width={20}
                                  >
                                    <path
                                      d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                                    />
                                  </svg>
                                </Svg>
                              </DownChevron>
                            </div>
                          </DropdownIndicator>
                        </div>
                      </IndicatorsContainer>
                    </div>
                  </Control>
                </div>
              </SelectContainer>
            </Select>
          </StateManager>
        </FormattedMessage>
      </StyledReactSelect>
    </div>
  </NetworkSwitch>
</IntlProvider>
`;
