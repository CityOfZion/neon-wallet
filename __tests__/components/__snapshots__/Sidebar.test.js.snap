// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sidebar renders without crashing 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(withData(IntlWrapper))>
    <withData(IntlWrapper)
      dispatch={[Function]}
      language="ENGLISH"
      languageDisplayValue="English"
    >
      <IntlProvider
        defaultFormats={Object {}}
        defaultLocale="en"
        formats={Object {}}
        locale="en"
        messages={
          Object {
            "Asset": "Assetasdasd",
            "activityAddAddress": "Add",
            "activityExport": "Export",
            "activityPageLabel": "All Activity",
            "activityViewTx": "View",
            "addAContact": "Add A Contact",
            "addContactDetails": "Add Contact Details",
            "addToContacts": "Add to contacts",
            "addToken": "Add Token",
            "addressLabel": "PUBLIC ADDRESS",
            "assetRecipients": "Asset {transferCount, plural, one {Recipient} other {Recipients}}",
            "assets": "Assets",
            "auth.cancel": "Cancel",
            "auth.import.recoveryInstructions": "Upload a JSON wallet recovery file here to add your accounts to Neon. This option is also available on the Settings page.",
            "auth.ledger.connectLedger": "Connect and unlock your <strong>Ledger device</strong>",
            "auth.ledger.fetchAddress": "Fetch additional addresses",
            "auth.ledger.navigateToNeoApp": "Navigate to the <strong>NEO app</strong> on your device",
            "auth.ledger.retry": "Retry?",
            "authCreateWallet": "Create Wallet",
            "authEncrypted": "ENCRYPTED",
            "authImportWallet": "Import Wallet",
            "authLedger": "LEDGER",
            "authLedgerAddressLabel": "PUBLIC ADDRESS",
            "authLedgerFirstStep": "Connect and unlock your Ledger device",
            "authLedgerSecondStep": "Navigate to the NEO app on your device",
            "authLogin": "Login",
            "authLoginButton": "Login",
            "authPrivate": "PRIVATE",
            "authPrivateKeyPlaceholder": "Enter your private key here",
            "authSaved": "SAVED",
            "authScanQRButton": "Scan QR",
            "authWatch": "WATCH",
            "authWatchPlaceholder": "Enter a NEO address here",
            "automaticNodeSelectionTooltip": "Allow NEON to choose a node automatically",
            "captureQR": "Capture",
            "captureQRCaps": "CAPTURE",
            "chooseAccount": "Choose an Existing Account",
            "claimTimeDisclaimer": "You can claim GAS once every 5 minutes",
            "claimUnavailableInWatch": "GAS claims are unavailable in Watch mode",
            "completeExclaim": "Complete!",
            "confirmAndSend": "Confirm & Send",
            "confirmRemoveContact": "Please confirm removing contact",
            "confirmation": "Confirmation",
            "confirmationRecipient": "{transferCount, number} {transferCount, plural, one {Recipient} other {Recipients}}",
            "contactName": "Name",
            "contactWalletAddress": "Wallet Address",
            "contactsPageLabel": "Manage Contacts",
            "copyAddressTooltip": "Copy Wallet Address",
            "copyCodeImage": "Copy Code Image",
            "createANewWallet": "Create New Wallet",
            "dashboardAddressLabel": "Address:",
            "dashboardAssetsPanelLabel": "System Assets",
            "dashboardAssetsTotal": "TOTAL",
            "dashboardBalancePanelLabel": "Token Balances",
            "dashboardGasClaimButton": "Claim {amount} GAS",
            "dashboardManageWallets": "Manage Wallets",
            "dashboardMarketData1Day": "1 DAY",
            "dashboardMarketData1Month": "1 MONTH",
            "dashboardMarketData1Week": "1 WEEK",
            "dashboardMarketDataLabel": "Market Data",
            "dashboardPriceNotAvailable": "N/A",
            "dashboardRefresh": "Refresh",
            "dashboardTokenBalancesHoldings": "HOLDINGS",
            "dashboardTokenBalancesPrice": "PRICE",
            "dashboardTokenBalancesToken": "Token",
            "dashboardValueLabel": "Total Wallet Value",
            "deleteLabel": "Delete",
            "depositAssets": "Deposit assets <b> compatible  with the NEO blockchain </b> using your address:",
            "editAContact": "Edit A Contact",
            "editContactDisclaimer": "Please review and ensure that you have entered the address correctly to avoid loss of funds",
            "editRecipients": "Edit Recipients",
            "encryptButton": "Generate Encrypted Key",
            "encryptInstructions": "Choose a passphrase to encrypt an existing key",
            "encryptPanelHeader": "Encrypt a key",
            "encryptStep1Label": "1) ENTER THE PRIVATE KEY YOU WANT TO ENCRYPT",
            "encryptStep1Placeholder": "Enter key",
            "encryptStep2Label": "2) CREATE A PASSPHRASE",
            "encryptStep2Placeholder": "Enter Passphrase",
            "encryptStep3Label": "3) CONFIM YOUR PASSPHRASE",
            "encryptStep3Placeholder": "Confirm Passphrase",
            "encryptedKeyLabel": "ENCRYPTED KEY",
            "enterAContactName": "Enter Contact Name...",
            "enterAWalletAddress": "Enter Wallet Address...",
            "errors.contact.contactExists": "You already have a contact with that address.",
            "errors.contact.invalidAddress": "Address is not valid.",
            "errors.contact.nameDupe": "You already have an account saved with that name.",
            "errors.contact.nameLength": "Name is too long.",
            "errors.contact.nameNull": "Name can't be null.",
            "errors.encrypt.valid": "The private key is not valid.",
            "errors.network.general": "Oops! Something went wrong...",
            "errors.password.length": "Passphrase must contain at least {PASS_MIN_LENGTH, number} characters.",
            "errors.password.match": "Passphrases must match.",
            "errors.request.fractional": "You canot request fractional {asset}.",
            "errors.request.max": "You cannot request more than 100,000,000 {asset}.",
            "errors.request.min": "You cannot request 0 {asset}.",
            "errors.request.validDecimals": "You can only request {asset} up to {validDecimals, number} decimals.",
            "errors.send.balance": "You do not have enough balance to send {total} {asset}.",
            "errors.send.blackListed": "Address is blacklisted. This is a known phishing address.",
            "errors.send.decimal": "You can only send {asset} up to {decimalCount, number} decimals.",
            "errors.send.fraction": "You cannot send fractional amounts of NEO.",
            "errors.send.invalidAddress": "You need to specify a valid NEO address.",
            "errors.send.negative": "You cannot send negative amounts of {asset}.",
            "errors.send.network": "A network error has occurred",
            "errors.send.number": "Amount must be a number.",
            "errors.send.zero": "Can not send 0 {asset}.",
            "fast": "Fast",
            "faster": "Faster",
            "fastest": "Fastest",
            "fee": "Fee:",
            "generateQrCodes": "Generate QR Codes",
            "importFile": "Import File",
            "inputEncryptedPlaceholder": "Encrypted Key",
            "inputPasswordPlaceholder": "Password",
            "inputSelectPlaceholder": "Select",
            "isLoadingMessage": "Loading...",
            "manageWalletsCreate": "Create",
            "manageWalletsEdit": "Edit",
            "manageWalletsEditWallet": "Edit Wallet",
            "manageWalletsEditWalletAddressLabel": "WALLET ADDRESS",
            "manageWalletsEditWalletInstructions": "Modify Details",
            "manageWalletsEditWalletNameLabel": "WALLET NAME",
            "manageWalletsEditWalletNamePlaceholder": "Wallet Name",
            "manageWalletsEditWalletSave": "Save Changes",
            "manageWalletsImport": "Import",
            "manageWalletsLabel": "Manage Wallets",
            "modalActionCancel": "Cancel",
            "modalActionConfirm": "Confirm",
            "modifyDetails": "Modify Details",
            "networkConfigTooltipAddress": "ADDRESS:",
            "networkConfigTooltipPublicKey": "PUBLIC KEY:",
            "networkConfigTooltipUpdateSettings": "Update Settings",
            "networkSettingsAutomatic": "AUTOMATIC",
            "networkSettingsCurrentLabel": "CURRENT NETWORK",
            "networkSettingsExplorerLabel": "BLOCK EXPLORER",
            "networkSettingsInstructions": "Manage all network settings related to how Neon interacts with the blockchain",
            "networkSettingsLabel": "Network Settings",
            "networkSettingsNodeSelectLabel": "NODE SELECTION",
            "newContact": "New Contact",
            "newsPageLabel": "News",
            "nextStep": "Next Step",
            "noAvailableAssetsToSend": "No available assets to send",
            "noClaimableGas": "Address has no claimable GAS",
            "noOptionsMessage": "No options",
            "nodeSelectBlockHeight": "Block Height",
            "nodeSelectInfo": "Top {nodeCount, number} nodes listed",
            "nodeSelectPanelHeader": "Node Selection",
            "nodeSelectSelectAutomatically": "Select automatically",
            "nodeSelectionInstructions": "If youâ€™re experiencing performance issues, try selecting a custom node below",
            "nothingToSeeHere": "Nothing to see here!",
            "notifications.failure.blockchainInfoFailure": "Failed to retrieve blockchain information.",
            "notifications.success.accountSaved": "Account saved!",
            "notifications.success.receivedBlockchainInfo": "Received latest blockchain information.",
            "notifications.success.updatedWalletName": "Succesfully updated wallet name.",
            "numberofTransactionsPending": "{transferCount, number} {transferCount, plural, one {Transfer} other {Transfers}} pending",
            "previousStep": "Previous Step",
            "print": "Print",
            "priorityTransfer": "Priority Transfer",
            "privateKey": "Private Key",
            "privateKeyLabel": "PRIVATE KEY",
            "publicAddress": "Public Address",
            "receiveAssetsAddressLabel": "Your Public Address",
            "receiveCopyCodeButton": "Copy Code Image",
            "receiveDisclaimer": "Only send assets that are <b>compatible with the NEO blockchain (NEO, GAS, etc.)</b>. Sending other assets will result in permanent loss.",
            "receivePageLabel": "Receive Assets",
            "receiveQRExplanation": "<p>Ever sent assets to the wrong address because of an errant character in the wallet address?</p><p>If not, lucky you - but it happens with frightening regularity.</p>  <p>Here at CoZ, we want to ensure people that pay you get your details right. You can generate a QR code for requesting assets to help them help you.</p><p>Every code you generate will include your public wallet address, an asset amount and a reference - all set by you.</p>",
            "receiveRequestTabAssets": "REQUEST ASSETS",
            "receiveYourAddressTabLabel": "YOUR ADDRESS",
            "recieveSelectMethod": "Select Deposit Method",
            "recieveWhyUseQRLabel": "Why use a QR code?",
            "recoverWallet": "RECOVER WALLET",
            "recoverWalletLabel": "RECOVER WALLET",
            "removeContact": "Remove Contact",
            "requestAssetAmount": "AMOUNT",
            "requestAssetAmountLabel": "Amount",
            "requestAssetDepositLabel": "DEPOSIT INTO THIS WALLET",
            "requestAssetLabel": "ASSET",
            "requestAssetQRButton": "Generate QR Code",
            "requestAssetRefLabel": "REFERENCE",
            "requestAssetRefPlaceholder": "Add a note...",
            "requestAssetYourQRHeader": "Your QR Code",
            "requestAssetsAddressLabel": "ADDRESS",
            "requestAssetsAmountLabel": "AMOUNT",
            "requestAssetsAssetLabel": "ASSET",
            "requestAssetsPaymentDetails": "PAYMENT REQUEST DETAILS",
            "requestAssetsRefLabel": "REFERENCE",
            "requestAssetsYourQRLabel": "YOUR QR CODE",
            "saveContactButtonText": "Save Contact",
            "selectAssets": "Select Assets",
            "sendActivityLink": "Check the activity tab to see the status of your transaction.",
            "sendAdd": "Add Recipient",
            "sendAddressLabel": "RECIPIENT ADDRESS",
            "sendAddressPlaceholder": "Add wallet or select contact",
            "sendAmountLabel": "AMOUNT",
            "sendAsset": "asset",
            "sendAssetCapital": "Asset",
            "sendAssetLabel": "ASSET",
            "sendAssets": "assets",
            "sendAssetsCapital": "Assets",
            "sendBroadcasting": "Broadcasting transaction to network...",
            "sendCompleteNotification": "Transaction pending! Your balance will automatically update when the blockchain has processed it.",
            "sendCompletion": "Complete! {transferCount, number} {transferCount, plural, one {sendAsset} other {sendAssets}} to {transferCount, plural, one {sendRecipient} other {sendRecipients}}",
            "sendDisclaimer": "Please review and ensure that you have entered the correct details to avoid loss of funds.",
            "sendEnterQRCode": "Enter QR Code",
            "sendErrorLabel": "Error!",
            "sendImport": "Import",
            "sendMaxAmount": "MAX",
            "sendMoreAssets": "Send More Assets",
            "sendPageLabel": "Send Assets",
            "sendQRExplanation": "So you've been given a QR code? Click capture and hold it up to your camera.",
            "sendRecipient": "recipient",
            "sendRecipientCapital": "Recipient",
            "sendRecipients": "recipients",
            "sendRecipientsCapital": "Recipients",
            "sendSelectAssets": "{transferCount, number} of {maxNumberOfRecipients, number} Recipients",
            "sendTranfer": "TRANSFER",
            "sendTransferMessage": "{transferCount, number} {transferCount, plural, one {sendTransfer} other {sendTransferPlural}} pending",
            "sendTransferPlural": "TRANSFERS",
            "sendWithFee": "Send {itemCount, plural, one {Asset} other {Assets}} With Fee",
            "sendWithoutFee": "Send {itemCount, plural, one {Asset} other {Assets}} Without Fee",
            "settingCurrencyLabel": "CURRENCY",
            "settingsBackUpLink": "EXPORT",
            "settingsBackUpLinkLabel": "BACKUP WALLET",
            "settingsCommunity": "Community Support",
            "settingsDonationLink": "Created by CoZ. Donations:",
            "settingsEncryptLink": "ENCRYPT A KEY",
            "settingsLanguageLabel": "LANGUAGE",
            "settingsManageLabel": "Manage your neon wallet",
            "settingsNetworkConfigLabel": "NETWORK CONFIGURATION",
            "settingsRecoverWalletLink": "IMPORT",
            "settingsSoundLabel": "SOUND",
            "settingsThemeLabel": "THEME",
            "sidebarActivity": "Activity",
            "sidebarContacts": "Contacts",
            "sidebarCurrentBlock": "CURRENT BLOCK",
            "sidebarLogout": "Logout",
            "sidebarNews": "News",
            "sidebarReceive": "Receive",
            "sidebarSend": "Send",
            "sidebarSettings": "Settings",
            "sidebarTokenSale": "Token Sale",
            "sidebarWallet": "Wallet",
            "splitKeyLabel": "SPLIT KEY",
            "splitKeyWalletInstructions": "The Split Key import option allows users to create a new NEO account by combining the private key of an existing account with a separate private key.",
            "splitKeyWalletNamePlaceholder": "Enter your new split key wallet name...",
            "takeMeBack": "Take me back",
            "tokenSaleDisclaimer1": "Please read and acknowledge these statements to continue",
            "tokenSaleDisclaimer2": "I understand that submitting NEO or GAS multiple times may result in a loss of funds or a delayed refund depending on the policy of the ICO company.",
            "tokenSaleDisclaimer3": "I understand that some sales may only accept NEO or GAS, and I have verified which is accepted.",
            "tokenSaleDisclaimer4": "I understand that if I send NEO or GAS to a token sale that has already ended, I will lose my NEO/GAS and will not be refunded.",
            "tokenSaleDisclaimer5": "I understand that City of Zion (CoZ) is not responsible for my usage of this feature, and I have consulted this software's licenses.",
            "tokenSalePageHeader": "Participate in Token Sale",
            "transactionFeeQuestion": "PRIORITIZE YOUR TRANSACTION WITH A FEE?",
            "transactionId": "Transaction ID:",
            "walletCreatedDisclaimer": "<b>Save these details!</b> If you lose these credentials, you lose access to your assets.",
            "walletCreatedHeader": "Wallet Created!",
            "walletCreationButton": "Create Wallet",
            "walletCreationInstruction": "Enter Details",
            "walletCreationWalletNameLabel": "WALLET NAME",
            "walletCreationWalletNamePlaceholder": "Wallet Name",
            "walletCreationWalletPasswordConfirmLabel": "CONFIRM PASSPHRASE",
            "walletCreationWalletPasswordConfirmPlaceholder": "Confirm Password",
            "walletCreationWalletPasswordLabel": "PASSPHRASE",
            "walletCreationWalletPasswordPlaceholder": "Password",
            "walletImportedHeader": "Wallet Created!",
            "walletManagerNoLocalInfo": "It looks like you have no wallet information saved locally...",
            "walletManagerRemoveWallet": "Remove Wallet",
            "walletQrCodes": "Wallet QR Codes",
          }
        }
        onError={[Function]}
        textComponent={Symbol(react.fragment)}
      >
        <MemoryRouter
          initialEntries={
            Array [
              "/",
            ]
          }
          keyLength={0}
        >
          <Router
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <withRouter(Connect(withData(Connect(withData(withProps(Connect(withData(Connect(withData(Connect(withData(Sidebar))))))))))))>
              <Route>
                <Connect(withData(Connect(withData(withProps(Connect(withData(Connect(withData(Connect(withData(Sidebar)))))))))))
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                >
                  <withData(Connect(withData(withProps(Connect(withData(Connect(withData(Connect(withData(Sidebar))))))))))
                    dispatch={[Function]}
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    isWatchOnly={false}
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                  >
                    <withData(withProps(Connect(withData(Connect(withData(Connect(withData(Sidebar))))))))
                      dispatch={[Function]}
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      isWatchOnly={false}
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                      networkId={1}
                    >
                      <Connect(withData(Connect(withData(Connect(withData(Sidebar))))))
                        dispatch={[Function]}
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        isWatchOnly={false}
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        net="MainNet"
                        networkId={1}
                      >
                        <withData(Connect(withData(Connect(withData(Sidebar)))))
                          chain="neo2"
                          dispatch={[Function]}
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          isWatchOnly={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                          net="MainNet"
                          networkId={1}
                        >
                          <withData(Connect(withData(Sidebar)))
                            chain="neo2"
                            dispatch={[Function]}
                            history={
                              Object {
                                "action": "POP",
                                "block": [Function],
                                "canGo": [Function],
                                "createHref": [Function],
                                "entries": Array [
                                  Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  },
                                ],
                                "go": [Function],
                                "goBack": [Function],
                                "goForward": [Function],
                                "index": 0,
                                "length": 1,
                                "listen": [Function],
                                "location": Object {
                                  "hash": "",
                                  "pathname": "/",
                                  "search": "",
                                  "state": undefined,
                                },
                                "push": [Function],
                                "replace": [Function],
                              }
                            }
                            isWatchOnly={false}
                            location={
                              Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              }
                            }
                            match={
                              Object {
                                "isExact": true,
                                "params": Object {},
                                "path": "/",
                                "url": "/",
                              }
                            }
                            net="MainNet"
                            networkId={1}
                            pendingTransactionsCount={0}
                          >
                            <withData(Sidebar)
                              chain="neo2"
                              count={300}
                              dispatch={[Function]}
                              history={
                                Object {
                                  "action": "POP",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              isWatchOnly={false}
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              match={
                                Object {
                                  "isExact": true,
                                  "params": Object {},
                                  "path": "/",
                                  "url": "/",
                                }
                              }
                              net="MainNet"
                              networkId={1}
                              pendingTransactionsCount={0}
                            >
                              <div
                                className="container"
                              >
                                <div
                                  className="group"
                                >
                                  <LogoWithTooltipAndBlockHeight
                                    count={300}
                                  >
                                    <Tooltip
                                      distance={-60}
                                      html={
                                        <Connect(withData(IntlWrapper))
                                          store={undefined}
                                        >
                                          <Connect(Connect(withData(Connect(withData(withProps(Connect(withCall(Connect(withData(Connect(withData(Connect(withData(Connect(withData(Connect(withData(injectIntl(NetworkConfigurationTooltip)))))))))))))))))))
                                            store={undefined}
                                          />
                                           
                                        </Connect(withData(IntlWrapper))>
                                      }
                                      interactive={true}
                                      onShow={[Function]}
                                      position="left"
                                      theme="network-settings"
                                    >
                                      <Tooltip
                                        animateFill={true}
                                        animation="fade"
                                        arrow={true}
                                        arrowSize="regular"
                                        className=""
                                        delay={0}
                                        disabled={false}
                                        distance={-60}
                                        duration={375}
                                        followCursor={false}
                                        hideDelay={0}
                                        hideDuration={375}
                                        hideOnClick={true}
                                        html={
                                          <Connect(withData(IntlWrapper))
                                            store={undefined}
                                          >
                                            <Connect(Connect(withData(Connect(withData(withProps(Connect(withCall(Connect(withData(Connect(withData(Connect(withData(Connect(withData(Connect(withData(injectIntl(NetworkConfigurationTooltip)))))))))))))))))))
                                              store={undefined}
                                            />
                                             
                                          </Connect(withData(IntlWrapper))>
                                        }
                                        inertia={false}
                                        interactive={true}
                                        interactiveBorder={2}
                                        multiple={false}
                                        offset={0}
                                        onHidden={[Function]}
                                        onHide={[Function]}
                                        onRequestClose={[Function]}
                                        onShow={[Function]}
                                        onShown={[Function]}
                                        popperOptions={Object {}}
                                        position="left"
                                        size="regular"
                                        sticky={false}
                                        stickyDuration={200}
                                        style={Object {}}
                                        theme="network-settings"
                                        touchHold={false}
                                        trigger="mouseenter focus"
                                        unmountHTMLWhenHide={false}
                                      >
                                        <div
                                          className=""
                                          style={
                                            Object {
                                              "display": "inline",
                                            }
                                          }
                                        >
                                          <div
                                            className="logo"
                                            id="neon-logo-container"
                                          >
                                            <img
                                              alt="neon-logo"
                                              id="neon-logo"
                                              src="test-file-stub"
                                            />
                                          </div>
                                          <div
                                            className="blockHeight"
                                            id="block-height-container"
                                          >
                                            <div
                                              className="heightText"
                                              id="block-height-label"
                                            >
                                              <FormattedMessage
                                                id="sidebarCurrentBlock"
                                                values={Object {}}
                                              >
                                                CURRENT BLOCK
                                              </FormattedMessage>
                                            </div>
                                            <div
                                              id="block-height"
                                            >
                                              300
                                            </div>
                                          </div>
                                        </div>
                                      </Tooltip>
                                    </Tooltip>
                                  </LogoWithTooltipAndBlockHeight>
                                  <NavLink
                                    activeClassName="active"
                                    aria-current="page"
                                    className="navItem"
                                    exact={true}
                                    id="dashboard"
                                    to="/dashboard"
                                  >
                                    <Route
                                      exact={true}
                                      path="\\\\/dashboard"
                                    >
                                      <Link
                                        aria-current={null}
                                        className="navItem"
                                        id="dashboard"
                                        replace={false}
                                        to="/dashboard"
                                      >
                                        <a
                                          aria-current={null}
                                          className="navItem"
                                          href="/dashboard"
                                          id="dashboard"
                                          onClick={[Function]}
                                        >
                                          <Component>
                                            <svg />
                                          </Component>
                                          <div>
                                            <FormattedMessage
                                              id="sidebarWallet"
                                              values={Object {}}
                                            >
                                              Wallet
                                            </FormattedMessage>
                                          </div>
                                        </a>
                                      </Link>
                                    </Route>
                                  </NavLink>
                                  <NavLink
                                    activeClassName="active"
                                    aria-current="page"
                                    className="navItem"
                                    exact={true}
                                    id="history"
                                    to="/transactions"
                                  >
                                    <Route
                                      exact={true}
                                      path="\\\\/transactions"
                                    >
                                      <Link
                                        aria-current={null}
                                        className="navItem"
                                        id="history"
                                        replace={false}
                                        to="/transactions"
                                      >
                                        <a
                                          aria-current={null}
                                          className="navItem"
                                          href="/transactions"
                                          id="history"
                                          onClick={[Function]}
                                        >
                                          <Component>
                                            <svg />
                                          </Component>
                                          <div>
                                             
                                            <FormattedMessage
                                              id="sidebarActivity"
                                              values={Object {}}
                                            >
                                              Activity
                                            </FormattedMessage>
                                             
                                          </div>
                                        </a>
                                      </Link>
                                    </Route>
                                  </NavLink>
                                  <NavLink
                                    activeClassName="active"
                                    aria-current="page"
                                    className="navItem"
                                    exact={true}
                                    id="send"
                                    to="/send/"
                                  >
                                    <Route
                                      exact={true}
                                      path="\\\\/send\\\\/"
                                    >
                                      <Link
                                        aria-current={null}
                                        className="navItem"
                                        id="send"
                                        replace={false}
                                        to="/send/"
                                      >
                                        <a
                                          aria-current={null}
                                          className="navItem"
                                          href="/send/"
                                          id="send"
                                          onClick={[Function]}
                                        >
                                          <Component>
                                            <svg />
                                          </Component>
                                          <div>
                                             
                                            <FormattedMessage
                                              id="sidebarSend"
                                              values={Object {}}
                                            >
                                              Send
                                            </FormattedMessage>
                                             
                                          </div>
                                        </a>
                                      </Link>
                                    </Route>
                                  </NavLink>
                                  <NavLink
                                    activeClassName="active"
                                    aria-current="page"
                                    className="navItem"
                                    exact={true}
                                    id="receive"
                                    to="/receive"
                                  >
                                    <Route
                                      exact={true}
                                      path="\\\\/receive"
                                    >
                                      <Link
                                        aria-current={null}
                                        className="navItem"
                                        id="receive"
                                        replace={false}
                                        to="/receive"
                                      >
                                        <a
                                          aria-current={null}
                                          className="navItem"
                                          href="/receive"
                                          id="receive"
                                          onClick={[Function]}
                                        >
                                          <Component>
                                            <svg />
                                          </Component>
                                          <div>
                                             
                                            <FormattedMessage
                                              id="sidebarReceive"
                                              values={Object {}}
                                            >
                                              Receive
                                            </FormattedMessage>
                                             
                                          </div>
                                        </a>
                                      </Link>
                                    </Route>
                                  </NavLink>
                                  <NavLink
                                    activeClassName="active"
                                    aria-current="page"
                                    className="navItem"
                                    id="contacts"
                                    to="/contacts"
                                  >
                                    <Route
                                      path="\\\\/contacts"
                                    >
                                      <Link
                                        aria-current={null}
                                        className="navItem"
                                        id="contacts"
                                        replace={false}
                                        to="/contacts"
                                      >
                                        <a
                                          aria-current={null}
                                          className="navItem"
                                          href="/contacts"
                                          id="contacts"
                                          onClick={[Function]}
                                        >
                                          <Component>
                                            <svg />
                                          </Component>
                                          <div>
                                             
                                            <FormattedMessage
                                              id="sidebarContacts"
                                              values={Object {}}
                                            >
                                              Contacts
                                            </FormattedMessage>
                                             
                                          </div>
                                        </a>
                                      </Link>
                                    </Route>
                                  </NavLink>
                                  <NavLink
                                    activeClassName="active"
                                    aria-current="page"
                                    className="navItem"
                                    id="News"
                                    to="/news"
                                  >
                                    <Route
                                      path="\\\\/news"
                                    >
                                      <Link
                                        aria-current={null}
                                        className="navItem"
                                        id="News"
                                        replace={false}
                                        to="/news"
                                      >
                                        <a
                                          aria-current={null}
                                          className="navItem"
                                          href="/news"
                                          id="News"
                                          onClick={[Function]}
                                        >
                                          <Component>
                                            <svg />
                                          </Component>
                                          <div>
                                             
                                            <FormattedMessage
                                              id="sidebarNews"
                                              values={Object {}}
                                            >
                                              News
                                            </FormattedMessage>
                                             
                                          </div>
                                        </a>
                                      </Link>
                                    </Route>
                                  </NavLink>
                                  <NavLink
                                    activeClassName="active"
                                    aria-current="page"
                                    className="navItem"
                                    id="settings"
                                    to="/settings"
                                  >
                                    <Route
                                      path="\\\\/settings"
                                    >
                                      <Link
                                        aria-current={null}
                                        className="navItem"
                                        id="settings"
                                        replace={false}
                                        to="/settings"
                                      >
                                        <a
                                          aria-current={null}
                                          className="navItem"
                                          href="/settings"
                                          id="settings"
                                          onClick={[Function]}
                                        >
                                          <Component>
                                            <svg />
                                          </Component>
                                          <div>
                                             
                                            <FormattedMessage
                                              id="sidebarSettings"
                                              values={Object {}}
                                            >
                                              Settings
                                            </FormattedMessage>
                                             
                                          </div>
                                        </a>
                                      </Link>
                                    </Route>
                                  </NavLink>
                                  <NavLink
                                    activeClassName="active"
                                    aria-current="page"
                                    className="mobileNavItem"
                                    id="mobile"
                                    to="/mobile"
                                  >
                                    <Route
                                      path="\\\\/mobile"
                                    >
                                      <Link
                                        aria-current={null}
                                        className="mobileNavItem"
                                        id="mobile"
                                        replace={false}
                                        to="/mobile"
                                      >
                                        <a
                                          aria-current={null}
                                          className="mobileNavItem"
                                          href="/mobile"
                                          id="mobile"
                                          onClick={[Function]}
                                        >
                                          <Component>
                                            <svg />
                                          </Component>
                                          <div>
                                             Mobile app
                                          </div>
                                        </a>
                                      </Link>
                                    </Route>
                                  </NavLink>
                                </div>
                                <Connect(withActions(Connect(withActions(Logout))))
                                  className="group logoutToolTipGroup navItem"
                                  id="logout"
                                >
                                  <withActions(Connect(withActions(Logout)))
                                    className="group logoutToolTipGroup navItem"
                                    id="logout"
                                    logout={[Function]}
                                  >
                                    <withActions(Logout)
                                      className="group logoutToolTipGroup navItem"
                                      id="logout"
                                      logout={[Function]}
                                      promptHasBeenDisplayed={[Function]}
                                    >
                                      <div
                                        className="logout group logoutToolTipGroup navItem"
                                        id="logout"
                                        onClick={[Function]}
                                      >
                                        <Component>
                                          <svg />
                                        </Component>
                                        <div
                                          className="logoutText"
                                        >
                                          <FormattedMessage
                                            id="sidebarLogout"
                                            values={Object {}}
                                          >
                                            Logout
                                          </FormattedMessage>
                                        </div>
                                      </div>
                                    </withActions(Logout)>
                                  </withActions(Connect(withActions(Logout)))>
                                </Connect(withActions(Connect(withActions(Logout))))>
                              </div>
                            </withData(Sidebar)>
                          </withData(Connect(withData(Sidebar)))>
                        </withData(Connect(withData(Connect(withData(Sidebar)))))>
                      </Connect(withData(Connect(withData(Connect(withData(Sidebar))))))>
                    </withData(withProps(Connect(withData(Connect(withData(Connect(withData(Sidebar))))))))>
                  </withData(Connect(withData(withProps(Connect(withData(Connect(withData(Connect(withData(Sidebar))))))))))>
                </Connect(withData(Connect(withData(withProps(Connect(withData(Connect(withData(Connect(withData(Sidebar)))))))))))>
              </Route>
            </withRouter(Connect(withData(Connect(withData(withProps(Connect(withData(Connect(withData(Connect(withData(Sidebar))))))))))))>
          </Router>
        </MemoryRouter>
      </IntlProvider>
    </withData(IntlWrapper)>
  </Connect(withData(IntlWrapper))>
</Provider>
`;
